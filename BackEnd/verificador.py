
# Lembre que junto com o verificador.py precisa do .env com a chave da API e o direcionamento para o banco de dados Mongo
# O arquivo .env deve conter as seguintes vari√°veis:
# GEMINI_API_KEY=<sua-chave-da-api-gemini>
# MONGO_URI=<sua-uri-de-conexao-mongodb>

import pymongo  
import os  
import json  
import datetime  
from dotenv import load_dotenv  
import logging  
import sys  


# Aqui dizemos pro sistema: "S√≥ me mostra erros GRAVES, o resto eu n√£o quero saber"
os.environ['GRPC_VERBOSITY'] = 'ERROR'
os.environ['GRPC_TRACE'] = ''

# Aqui a gente fala pros sistemas de log do Python: "Relaxa a√≠, s√≥ me avisa se for MUITO s√©rio"
logging.getLogger('grpc').setLevel(logging.ERROR)
logging.getLogger('absl').setLevel(logging.ERROR)



def suppress_stderr():
    """Essa fun√ß√£o cria um 'silenciador' tempor√°rio para mensagens de erro."""
    import contextlib
    
    @contextlib.contextmanager
    def _redirect():
        # Guarda a "boca" original do sistema
        original_stderr_fd = sys.stderr.fileno()
        saved_stderr_fd = os.dup(original_stderr_fd)
        
        try:
            # Redireciona a "boca" pra um buraco negro (devnull = nada)
            devnull_fd = os.open(os.devnull, os.O_WRONLY)
            os.dup2(devnull_fd, original_stderr_fd)
            os.close(devnull_fd)
            yield
        finally:
            # Devolve a "boca" original pro sistema
            os.dup2(saved_stderr_fd, original_stderr_fd)
            os.close(saved_stderr_fd)
    
    return _redirect()

# Importa o gemini e n√£o deixa ele reclamar de nada (Evitando erros bobos da propria api) 
with suppress_stderr():
    import google.generativeai as genai

# Pega as coisas do env como chave de api e etc 
load_dotenv()

# Fala pro Gemini qual √© nossa chave de API 
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))

# Conecta no banco de dados MongoDB
mongo_client = pymongo.MongoClient(os.getenv("MONGO_URI"))
db = mongo_client["seliga_db_teste"]  # Abre o banco chamado "seliga_db_teste"
noticias_collection = db["noticias"]  # Abre a gaveta "noticias" dentro do banco

# Escolhe qual IA vamos usar tendo varios modelos no site da API 2.5 flash vai atender bem as nossas necessidades
model = genai.GenerativeModel('gemini-2.5-flash')  


# Essa fun√ß√£o cria a pergunta que vamos fazer pra IA.
# Explica direitinho pro Gemini o que ele tem que fazer.

def criar_prompt_verificacao(titulo, texto):
    """
    Cria a pergunta (prompt) que vamos mandar pro Gemini.
    
    √â tipo fazer um pedido bem espec√≠fico num restaurante:
    "Eu quero um hamb√∫rguer, SEM picles, COM queijo extra, e me traz num prato azul!"
    
    Aqui a gente pede:
    - Analisa essa not√≠cia a√≠
    - Me diz se √© verdade ou fake
    - Me d√° um n√∫mero de 0 a 100 de qu√£o certo voc√™ est√°
    - Explica o porqu√™
    - Me conta onde voc√™ pesquisou
    - E me responde TUDO em formato JSON (tipo um formul√°rio organizadinho)
    """
    prompt = f"""
    Voc√™ √© um especialista em checagem de fatos. Sua tarefa √© analisar a veracidade da not√≠cia abaixo.

    Not√≠cia:
    - T√≠tulo: "{titulo}"
    - Texto: "{texto}"

    Retorne sua an√°lise em um objeto JSON com a seguinte estrutura:
    {{
      "classificacao": "Verdadeira", "Falsa" ou "Inconclusiva",
      "confianca_percentual": um n√∫mero de 0 a 100,
      "justificativa": "Uma explica√ß√£o curta e objetiva.",
      "fontes_consultadas": ["lista de fontes, sites, ou bases de conhecimento que voc√™ usou para fazer esta an√°lise"]
    }}

    IMPORTANTE: Inclua no campo "fontes_consultadas" as fontes de informa√ß√£o, sites conhecidos, estudos, 
    ou bases de conhecimento que voc√™ considerou para fazer esta verifica√ß√£o.

    N√£o adicione nenhum texto antes ou depois do JSON.
    """
    return prompt


def verificar_noticias_pendentes():
    """
    Essa √© a fun√ß√£o principal! Ela faz TODO o trampo! 
    
    Pensa nela como uma linha de produ√ß√£o de f√°brica:
    - Pega as not√≠cias que t√£o esperando (as pendentes)
    - Passa cada uma pela "m√°quina de verifica√ß√£o" (o Gemini)
    - Coloca o resultado na caixa (banco de dados)
    - Te mostra quantas passaram e quantas deram problema
    """
    
    # PASSO 1: Procurar todas as not√≠cias que t√£o esperando pra serem verificadas
    noticias_pendentes = list(noticias_collection.find({"status_verificacao": "pendente"}))

    # Se n√£o tem nada pra verificar, a gente avisa e sai fora!
    if not noticias_pendentes:
        print("Nenhuma not√≠cia pendente encontrada. Tudo em dia!")
        return  

    # Mostra um banner bonit√£o dizendo quantas not√≠cias vamos verificar
    print("=" * 80)
    print(f"Encontradas {len(noticias_pendentes)} not√≠cia(s) pendente(s) para verifica√ß√£o")
    print("=" * 80)

    # Vamos contar quantas deram certo e quantas deram errado
    verificadas_com_sucesso = 0
    verificadas_com_erro = 0  

    # PASSO 2: Agora vamos processar cada not√≠cia, uma de cada vez

    for i, noticia_para_verificar in enumerate(noticias_pendentes, 1):
        print(f"\n[{i}/{len(noticias_pendentes)}] Verificando: '{noticia_para_verificar['titulo']}'")
        print("-" * 80)

        try:  
            
            # PASSO 3: Preparar a pergunta e mandar pro Gemini
            # Aqui a gente monta a pergunta usando aquela fun√ß√£o que criamos l√° em cima
            prompt = criar_prompt_verificacao(
                noticia_para_verificar['titulo'],  # O t√≠tulo da not√≠cia
                noticia_para_verificar['texto']     # O texto completo
            )
            # Agora manda a pergunta pro Gemini e espera ele responder
            response = model.generate_content(prompt)
            
            # PASSO 4: Limpar e organizar a resposta que o Gemini mandou
            # √Äs vezes ele manda uns textos extras tipo "```json" que a gente n√£o quer
            # Ent√£o a gente limpa isso tudo e transforma em algo que o Python entende
            resposta_texto = response.text.strip().replace("```json", "").replace("```", "")
            resultado_json = json.loads(resposta_texto)  
            # Transforma o texto em um dicion√°rio Python
            
            # PASSO 5: Salvar o resultado no banco de dados
            # Aqui a gente atualiza a not√≠cia no banco, colocando:
            # - Status como "verificado" (pra n√£o verificar de novo)
            # - Todas as informa√ß√µes que o Gemini nos deu
            noticias_collection.update_one(
                {"_id": noticia_para_verificar["_id"]},  # Encontra a not√≠cia pelo ID √∫nico
                {
                    "$set": {  
                        "status_verificacao": "verificado",  # Marca como verificado 
                        "verificacao": {
                            "classificacao": resultado_json.get("classificacao"),
                            "confianca_percentual": resultado_json.get("confianca_percentual"),
                            "justificativa": resultado_json.get("justificativa"),
                            "fontes_consultadas": resultado_json.get("fontes_consultadas", []),
                            "data_verificacao": datetime.datetime.now(datetime.timezone.utc)
                        }
                    }
                }
            )
            
            # PASSO 6: Mostrar o resultado na tela pra gente ver!
            print(f"‚úÖ Classifica√ß√£o: {resultado_json.get('classificacao')}")
            print(f"   Confian√ßa: {resultado_json.get('confianca_percentual')}%")
            print(f"   Justificativa: {resultado_json.get('justificativa')}")
            
            # Mostra as fontes que o Gemini usou 
            fontes = resultado_json.get('fontes_consultadas', [])
            if fontes:
                print(f"   Fontes consultadas:")
                for fonte in fontes:
                    print(f"      - {fonte}")
            else:
                print(f"   Fontes consultadas: Nenhuma fonte espec√≠fica mencionada")
            
            verificadas_com_sucesso += 1

        # Se deu algum erro (a internet caiu, o Gemini bugou, etc.), cai aqui!
        except Exception as e:
            print(f"‚ùå ERRO ao verificar esta not√≠cia: {e}")
            
            # Tenta mostrar o que o Gemini respondeu (se ele chegou a responder)
            if 'response' in locals():
                print(f"   Resposta recebida do Gemini:")
                print(f"   {response.text[:200]}...")  # Mostra s√≥ os primeiros 200 caracteres
            else:
                print(f"   O erro ocorreu antes mesmo de receber uma resposta do Gemini.")

            # Marca a not√≠cia como "erro" no banco de dados
            # √â tipo marcar na lista: "Essa aqui deu problema, olhar depois"
            noticias_collection.update_one(
                {"_id": noticia_para_verificar["_id"]},
                {"$set": {"status_verificacao": "erro"}}
            )
            
            verificadas_com_erro += 1

    print("\n" + "=" * 80)
    print("RESUMO DA VERIFICA√á√ÉO")
    print("=" * 80)
    print(f"‚úÖ Verificadas com sucesso: {verificadas_com_sucesso}")
    print(f"‚ùå Verificadas com erro: {verificadas_com_erro}")
    print(f"üìä Total processado: {len(noticias_pendentes)}")
    print("=" * 80)


if __name__ == "__main__":
    verificar_noticias_pendentes()  